import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:async';
import 'dart:convert';
import 'package:bosscheck2/services/notification_service.dart';
import 'package:go_router/go_router.dart';



void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await NotificationService().init(); // 푸시 알림 초기화
  runApp(BossTimerApp());
}

class BossTimerApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: BossTimerScreen(), // BossTimerScreen을 홈으로 설정
    );
  }
}

class BossTimerScreen extends StatefulWidget {
  @override
  _BossTimerScreenState createState() => _BossTimerScreenState();
}

class _BossTimerScreenState extends State<BossTimerScreen> {
  List<BossTimer> timers = [];
  List<User> users = [
    User('피닉스(R)','8h','assets/images/Monster/피닉스.jpg'),
    User('진 이프리트(R)','2h','assets/images/Monster/이프리트.jpg'),
    User('큰 발의 마요(R)','3h','assets/images/Monster/마요.jpg'),
    User('자이언트 웜(R)','2h','assets/images/Monster/자이언트웜.jpg'),
    User('에자(R)','8.5h','assets/images/Monster/에자.jpg'),
    User('커츠(R)','10h','assets/images/Monster/커츠.jpg'),
    User('거대 드레이크(R)','6h','assets/images/Monster/거대드레이크.jpg'),
    User('드레이크(서)','2h','assets/images/Monster/드레이크.jpg'),
    User('드레이크(북)','2h','assets/images/Monster/드레이크.jpg'),
    User('드레이크(중)','3h','assets/images/Monster/드레이크.jpg'),
    User('드레이크(동)','3h','assets/images/Monster/드레이크.jpg'),
    User('대 흑장로','3h','assets/images/Monster/대흑장로.jpg'),
    User('케레니스(R)','3h','assets/images/Monster/케레니스.jpg'),
    User('암흑 대장로(R)','3h','assets/images/Monster/암흑대장로.jpg'),
    User('대장군 베리스(R)','3h','assets/images/Monster/대장군 베리스.jpg'),
    User('감시자 데몬','6h','assets/images/Monster/감시자데몬.jpg'),
    User('질풍의 샤스키(R)','2h','assets/images/Monster/질풍의 샤스키.jpg'),
    User('광풍의 샤스키(R)','2h','assets/images/Monster/광풍의 샤스키.jpg'),
    User('자크','3h','assets/images/Monster/크로커다일.jpg'),
    User('아르피어','4h','assets/images/Monster/아르피어.jpg'),
    User('리칸트(R)','8h','assets/images/Monster/리칸트.jpg'),
    User('산적 두목(R)','3h','assets/images/Monster/산적두목.jpg'),
    User('가스트 로드(R)','7.5h','assets/images/Monster/가스트로드.jpg'),
    User('스피리드','3h','assets/images/Monster/스피리드.jpg'),
    User('카스파 일당','2h','assets/images/Monster/카스파일당.jpg'),
    User('도플갱어 보스(R)','7h','assets/images/Monster/도플갱어.jpg'),
    User('거대수호개미(R)','3.5h','assets/images/Monster/거대수호개미.jpg'),
    User('데스나이트(R)','9h','assets/images/Monster/데스나이트.jpg'),
    User('네크로맨서','PM 1시,3시,5시,7시,9시','assets/images/Monster/네크로맨서.jpg'),
    User('바포메트','AM/PM 2:20~2:30\nAM/PM 8:00~8:30','assets/images/Monster/바포메트.jpg'),
  ];

  // 이곳에 두 개의 컨트롤러를 선언합니다.
  TextEditingController nameController = TextEditingController();
  TextEditingController timeController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadTimers();
  }

  // 타이머 데이터 로드
  void _loadTimers() async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      List<String>? storedTimers = prefs.getStringList('timers');
      if (storedTimers != null) {
        setState(() {
          timers = storedTimers
              .map((data) => BossTimer.fromJson(json.decode(data)))
              .toList();
        });
      }
    } catch (e) {
      print("Error loading timers: $e");
    }
  }

  // 타이머 데이터 저장
  void _saveTimers() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> storedTimers =
    timers.map((timer) => json.encode(timer.toJson())).toList();
    await prefs.setStringList('timers', storedTimers);
  }

  // 새로운 보스 타이머 추가
  void addBossTimer(String name, double respawnTimeInHours) {
    int respawnTimeInMinutes = (respawnTimeInHours * 60).toInt(); // 시간을 분으로 변환
    setState(() {
      timers.add(BossTimer(
        name: name,
        respawnTime: respawnTimeInMinutes * 60, // 초 단위로 변경
        onExpire: () {
          NotificationService().showNotification(
            0, // 알림 ID (고유값, 중복되지 않도록 설정)
            "보스 타이머 종료", // 알림 제목
            "$name 리스폰 시간입니다!", // 알림 내용
          );
        },
        onTick: () {
          setState(() {}); // onTick이 호출될 때마다 화면을 갱신하여 시간 표시
        },
      ));
      _saveTimers();
    });
  }

  // 보스 타이머 삭제
  void removeTimer(BossTimer timer) {
    setState(() {
      timer.stopTimer();
      timers.remove(timer);
      _saveTimers();
    });
  }

  // 사용자가 선택하면 타이머에 이름과 리젠 시간 설정
  void _onUserTap(User user) {
    setState(() {
      nameController.text = user.name;
      timeController.text = user.regen.replaceAll("h", ""); // 'h'를 제거
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        toolbarHeight: 120, // AppBar의 높이를 설정합니다.
        flexibleSpace: Container(
          decoration: BoxDecoration(
            image: DecorationImage(
              image: AssetImage('assets/images/boss_timer_background.jpg'),
              fit: BoxFit.cover, // 이미지가 AppBar를 가득 채우도록 설정
            ),
          ),
        ),
        leading: IconButton(
          icon: Icon(Icons.notifications, color: Colors.white), // 알림 아이콘
          onPressed: () {
            // 알림 클릭 시 동작
          },
        ),
        title: Text(
          "보탐 체크기",
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        centerTitle: true,
        actions: [
          IconButton(
            icon: Icon(Icons.backspace, color: Colors.white), // 백스페이스 아이콘
            onPressed: () {
              context.go('/');
            },
          )
        ],
      ),
      body: Column(
        children: [
          // 사용자 목록을 그리드로 변경
          Expanded(
            child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 6, // 6열로 설정
                crossAxisSpacing: 1, // 열 사이의 간격
                mainAxisSpacing: 1, // 행 사이의 간격
                childAspectRatio: 2.0, // 항목의 가로 세로 비율을 설정 (너비:높이)
              ),
              itemCount: users.length, // 리스트 항목 수
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () {
                    // 사용자가 탭하면 이름과 리젠 시간을 전달
                    _onUserTap(users[index]);
                  },
                  child: Card(
                    elevation: 2, // 카드 그림자 약하게
                    margin: EdgeInsets.all(4), // 카드 간 간격
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10), // 카드 모서리를 둥글게 설정
                        image: DecorationImage(
                          image: AssetImage(users[index].image), // 각 사용자에 맞는 이미지 사용
                          fit: BoxFit.cover, // 이미지가 카드 크기에 맞게 채워지도록 설정
                        ),
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 2.0), // 텍스트 위아래 패딩 조정
                            child: Text(
                              users[index].name,
                              style: TextStyle(
                                color: Colors.white, // 글자 색을 흰색으로 설정하여 배경과 대비되게
                                fontWeight: FontWeight.bold,
                                fontSize: 14, // 텍스트 크기 조정
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 1.0), // 텍스트 위아래 패딩 조정
                            child: Text(
                              users[index].regen,
                              style: TextStyle(
                                color: Colors.blue, // 글자 색을 흰색으로 설정
                                fontSize: 12, // 텍스트 크기 조정
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ),

          // 타이머 목록을 리스트로 표시
          Expanded(
            child: ListView.builder(
              itemCount: timers.length,
              itemBuilder: (context, index) {
                return timers[index].buildTile(() {
                  removeTimer(timers[index]);
                });
              },
            ),
          ),
        ],
      ),
      persistentFooterButtons: [
        AddBossTimerForm(onAdd: addBossTimer, nameController: nameController, timeController: timeController),
      ],
    );
  }
}

class BossTimer {
  final String name;
  final int respawnTime; // in seconds
  Timer? _timer;
  int remainingTime;
  final VoidCallback onExpire;
  final VoidCallback onTick; // onTick 콜백 추가

  BossTimer({
    required this.name,
    required this.respawnTime,
    required this.onExpire,
    required this.onTick, // 생성자에서 onTick을 받아옴
  }) : remainingTime = respawnTime {
    startTimer();
  }

  // 타이머 시작
  void startTimer() {
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      if (remainingTime > 0) {
        remainingTime--;
        onTick(); // 타이머가 tick할 때마다 호출되는 콜백
      } else {
        timer.cancel();
        onExpire();
      }
    });
  }

  // 타이머 중지
  void stopTimer() {
    _timer?.cancel();
  }

  // 타이머 목록 아이템 UI
  Widget buildTile(VoidCallback onDelete) {
    return Card(
      child: ListTile(
        leading: Icon(Icons.timer, color: Colors.blue),
        title: Text(name),
        subtitle: Text("남은 시간: ${_formatTime(remainingTime)}"),
        trailing: IconButton(
          icon: Icon(Icons.delete, color: Colors.red),
          onPressed: onDelete,
        ),
      ),
    );
  }

  // 시간 포맷팅
  String _formatTime(int seconds) {
    int minutes = seconds ~/ 60;
    int secs = seconds % 60;
    return "${minutes.toString().padLeft(2, '0')}:${secs.toString().padLeft(2, '0')}";
  }

  // JSON으로 타이머 객체 변환
  Map<String, dynamic> toJson() {
    return {'name': name, 'respawnTime': remainingTime};
  }

  // JSON에서 타이머 객체 생성
  factory BossTimer.fromJson(Map<String, dynamic> json) {
    return BossTimer(
      name: json['name'],
      respawnTime: json['respawnTime'],
      onExpire: () {
        NotificationService().showNotification(
          0,
          "${json['name']} 리스폰 시간입니다!",
          "보스 타이머 종료",
        );
      },
      onTick: () {},
    );
  }
}

class User {
  String name;
  String regen;
  String image;
  User(this.name, this.regen, this.image);
}

class AddBossTimerForm extends StatefulWidget {
  final Function(String, double) onAdd;
  final TextEditingController nameController;
  final TextEditingController timeController;

  AddBossTimerForm({required this.onAdd, required this.nameController, required this.timeController});

  @override
  _AddBossTimerFormState createState() => _AddBossTimerFormState();
}

class _AddBossTimerFormState extends State<AddBossTimerForm> {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Row(
          children: [
            Expanded(
              child: TextFormField(
                controller: widget.nameController,
                decoration: InputDecoration(labelText: "보스 이름"),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return "보스 이름을 입력하세요.";
                  }
                  return null;
                },
              ),
            ),
            SizedBox(width: 10),
            Expanded(
              child: TextFormField(
                controller: widget.timeController,
                decoration: InputDecoration(labelText: "리스폰 시간 (시간)"),
                keyboardType: TextInputType.numberWithOptions(decimal: true),
                validator: (value) {
                  if (value == null || double.tryParse(value) == null) {
                    return "시간을 올바르게 입력하세요.";
                  }
                  return null;
                },
              ),
            ),
            SizedBox(width: 10),
            ElevatedButton(
              onPressed: () {
                if (_formKey.currentState!.validate()) {
                  widget.onAdd(
                    widget.nameController.text,
                    double.parse(widget.timeController.text), // 시간을 double 형식으로 입력받기
                  );
                  widget.nameController.clear();
                  widget.timeController.clear();
                }
              },
              child: Text("추가"),
            ),
          ],
        ),
      ),
    );
  }
}
